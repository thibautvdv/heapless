(function() {var implementors = {};
implementors["byteorder"] = [{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, N&gt; Freeze for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for GenericArray&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hash32"] = [{"text":"impl Freeze for Hasher","synthetic":true,"types":[]},{"text":"impl Freeze for Hasher","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for BuildHasherDefault&lt;H&gt;","synthetic":true,"types":[]}];
implementors["heapless"] = [{"text":"impl&lt;T, N&gt; Freeze for HistoryBuffer&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, N, S&gt; Freeze for IndexMap&lt;K, V, N, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;Bucket&lt;K, V&gt;&gt;&gt;::ArrayType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;Option&lt;Pos&gt;&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, N, S&gt; Freeze for IndexSet&lt;T, N, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;Bucket&lt;T, ()&gt;&gt;&gt;::ArrayType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;Option&lt;Pos&gt;&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, N&gt; Freeze for LinearMap&lt;K, V, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;(K, V)&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for String&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Freeze for Vec&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Min","synthetic":true,"types":[]},{"text":"impl Freeze for Max","synthetic":true,"types":[]},{"text":"impl&lt;T, N, KIND&gt; Freeze for BinaryHeap&lt;T, N, KIND&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, K&gt; Freeze for PeekMut&lt;'a, T, N, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, K&gt; Freeze for BinaryHeap&lt;A, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for LinearMap&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, U&nbsp;=&nbsp;usize, C&nbsp;=&nbsp;MultiCore&gt; !Freeze for Queue&lt;A, U, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for String&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Vec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Q2&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Q4&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Q8&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Q16&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Q32&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Q64&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;POOL, STATE&gt; Freeze for Box&lt;POOL, STATE&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Node&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Pool&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, STATE&gt; Freeze for Box&lt;T, STATE&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Uninit","synthetic":true,"types":[]},{"text":"impl Freeze for Init","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; Freeze for Consumer&lt;'a, T, N, U, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; Freeze for Producer&lt;'a, T, N, U, C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MultiCore","synthetic":true,"types":[]},{"text":"impl Freeze for SingleCore","synthetic":true,"types":[]},{"text":"impl&lt;T, N, U&nbsp;=&nbsp;usize, C&nbsp;=&nbsp;MultiCore&gt; !Freeze for Queue&lt;T, N, U, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; Freeze for Iter&lt;'a, T, N, U, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; Freeze for IterMut&lt;'a, T, N, U, C&gt;","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Freeze for B0","synthetic":true,"types":[]},{"text":"impl Freeze for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Freeze for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Freeze for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Z0","synthetic":true,"types":[]},{"text":"impl Freeze for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Freeze for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Freeze for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Greater","synthetic":true,"types":[]},{"text":"impl Freeze for Less","synthetic":true,"types":[]},{"text":"impl Freeze for Equal","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()