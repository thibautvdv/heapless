(function() {var implementors = {};
implementors["byteorder"] = [{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, N&gt; Send for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send, N:&nbsp;ArrayLength&lt;T&gt;&gt; Send for GenericArray&lt;T, N&gt;","synthetic":false,"types":[]}];
implementors["hash32"] = [{"text":"impl Send for Hasher","synthetic":true,"types":[]},{"text":"impl Send for Hasher","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for BuildHasherDefault&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["heapless"] = [{"text":"impl&lt;T, N&gt; Send for HistoryBuffer&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, N, S&gt; Send for IndexMap&lt;K, V, N, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, N, S&gt; Send for IndexSet&lt;T, N, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, N&gt; Send for LinearMap&lt;K, V, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for String&lt;N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Send for Vec&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Min","synthetic":true,"types":[]},{"text":"impl Send for Max","synthetic":true,"types":[]},{"text":"impl&lt;T, N, KIND&gt; Send for BinaryHeap&lt;T, N, KIND&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;KIND: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, K&gt; Send for PeekMut&lt;'a, T, N, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, K&gt; Send for BinaryHeap&lt;A, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for LinearMap&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, U, C&gt; Send for Queue&lt;A, U, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for String&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Vec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Q2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Q4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Q8&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Q16&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Q32&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Q64&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Node&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Uninit","synthetic":true,"types":[]},{"text":"impl Send for Init","synthetic":true,"types":[]},{"text":"impl Send for MultiCore","synthetic":true,"types":[]},{"text":"impl Send for SingleCore","synthetic":true,"types":[]},{"text":"impl&lt;T, N, U, C&gt; Send for Queue&lt;T, N, U, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; !Send for Iter&lt;'a, T, N, U, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; Send for IterMut&lt;'a, T, N, U, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, S&gt; Send for Box&lt;P, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Pool,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Data: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for Pool&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Send for Box&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; Send for Consumer&lt;'a, T, N, U, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Uxx,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: XCore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; Send for Producer&lt;'a, T, N, U, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Uxx,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: XCore,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Send for B0","synthetic":true,"types":[]},{"text":"impl Send for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Z0","synthetic":true,"types":[]},{"text":"impl Send for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Send for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Send for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Greater","synthetic":true,"types":[]},{"text":"impl Send for Less","synthetic":true,"types":[]},{"text":"impl Send for Equal","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()